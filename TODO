
Still there is a lot of work todo!

* Write more tests and examples, ( maybe translating DirectFB-examples? )

Generator script
----------------
* Implement intelligent enum generation, only generate the ones we use.

DirectFB generation
-------------------
* Convert from DFBResult to some string for useful error messages.
* Add interface support, if makes sense
* Add function support, if makes sense

Enums
-----

This is still an open issue. Right now, every C-enum is a lua global variable.
This pollutes the namespace and prevents us from checking illegal values.

One possible solution that may be added to the present one (so one can compare them)
would be to pass strings as: 'ONE,TWO,THREE' (where the comma can be replaced 'ONE|TWO|THREE').

This string gets parsed (in the C-side) and each one is used as a key into a table, like this:

enum_table['ONE']
enum_table['TWO']

If we found a nil value, this means the string is illegal for this enum. 
This way we can avoid annoying string comparison and take advantage of lua
string handling (?).

On returning an enum, we could build a userdata an implement a contains() function.
So the usage would be like this:

caps = s:GetCapabilities()
if caps:contains('SOME_ENUM') then
	-- stuff
end
